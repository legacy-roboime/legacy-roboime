// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_internal_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CommandWheel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandWheel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandKicker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandKicker_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDribbler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDribbler_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToTransmission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToTransmission_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_5finternal_5fcommand_2eproto() {
  protobuf_AddDesc_messages_5finternal_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages_internal_command.proto");
  GOOGLE_CHECK(file != NULL);
  CommandWheel_descriptor_ = file->message_type(0);
  static const int CommandWheel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandWheel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandWheel, speed_),
  };
  CommandWheel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandWheel_descriptor_,
      CommandWheel::default_instance_,
      CommandWheel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandWheel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandWheel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandWheel));
  CommandKicker_descriptor_ = file->message_type(1);
  static const int CommandKicker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandKicker, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandKicker, forced_),
  };
  CommandKicker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandKicker_descriptor_,
      CommandKicker::default_instance_,
      CommandKicker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandKicker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandKicker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandKicker));
  CommandDribbler_descriptor_ = file->message_type(2);
  static const int CommandDribbler_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDribbler, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDribbler, forced_),
  };
  CommandDribbler_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDribbler_descriptor_,
      CommandDribbler::default_instance_,
      CommandDribbler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDribbler, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDribbler, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDribbler));
  CommandRobot_descriptor_ = file->message_type(3);
  static const int CommandRobot_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRobot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRobot, wheels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRobot, kicker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRobot, dribbler_),
  };
  CommandRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRobot_descriptor_,
      CommandRobot::default_instance_,
      CommandRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRobot));
  ToTransmission_descriptor_ = file->message_type(4);
  static const int ToTransmission_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTransmission, robots_),
  };
  ToTransmission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToTransmission_descriptor_,
      ToTransmission::default_instance_,
      ToTransmission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTransmission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTransmission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToTransmission));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_5finternal_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandWheel_descriptor_, &CommandWheel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandKicker_descriptor_, &CommandKicker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDribbler_descriptor_, &CommandDribbler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRobot_descriptor_, &CommandRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToTransmission_descriptor_, &ToTransmission::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_5finternal_5fcommand_2eproto() {
  delete CommandWheel::default_instance_;
  delete CommandWheel_reflection_;
  delete CommandKicker::default_instance_;
  delete CommandKicker_reflection_;
  delete CommandDribbler::default_instance_;
  delete CommandDribbler_reflection_;
  delete CommandRobot::default_instance_;
  delete CommandRobot_reflection_;
  delete ToTransmission::default_instance_;
  delete ToTransmission_reflection_;
}

void protobuf_AddDesc_messages_5finternal_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037messages_internal_command.proto\")\n\014Com"
    "mandWheel\022\n\n\002id\030\001 \002(\r\022\r\n\005speed\030\002 \002(\001\"5\n\r"
    "CommandKicker\022\r\n\005speed\030\001 \002(\001\022\025\n\006forced\030\002"
    " \001(\010:\005false\"7\n\017CommandDribbler\022\r\n\005speed\030"
    "\001 \002(\001\022\025\n\006forced\030\002 \001(\010:\005false\"}\n\014CommandR"
    "obot\022\n\n\002id\030\001 \002(\r\022\035\n\006wheels\030\002 \003(\0132\r.Comma"
    "ndWheel\022\036\n\006kicker\030\003 \001(\0132\016.CommandKicker\022"
    "\"\n\010dribbler\030\004 \001(\0132\020.CommandDribbler\"/\n\016T"
    "oTransmission\022\035\n\006robots\030\001 \003(\0132\r.CommandR"
    "obot", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_internal_command.proto", &protobuf_RegisterTypes);
  CommandWheel::default_instance_ = new CommandWheel();
  CommandKicker::default_instance_ = new CommandKicker();
  CommandDribbler::default_instance_ = new CommandDribbler();
  CommandRobot::default_instance_ = new CommandRobot();
  ToTransmission::default_instance_ = new ToTransmission();
  CommandWheel::default_instance_->InitAsDefaultInstance();
  CommandKicker::default_instance_->InitAsDefaultInstance();
  CommandDribbler::default_instance_->InitAsDefaultInstance();
  CommandRobot::default_instance_->InitAsDefaultInstance();
  ToTransmission::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5finternal_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5finternal_5fcommand_2eproto {
  StaticDescriptorInitializer_messages_5finternal_5fcommand_2eproto() {
    protobuf_AddDesc_messages_5finternal_5fcommand_2eproto();
  }
} static_descriptor_initializer_messages_5finternal_5fcommand_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CommandWheel::kIdFieldNumber;
const int CommandWheel::kSpeedFieldNumber;
#endif  // !_MSC_VER

CommandWheel::CommandWheel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandWheel::InitAsDefaultInstance() {
}

CommandWheel::CommandWheel(const CommandWheel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandWheel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandWheel::~CommandWheel() {
  SharedDtor();
}

void CommandWheel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandWheel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandWheel_descriptor_;
}

const CommandWheel& CommandWheel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5finternal_5fcommand_2eproto();  return *default_instance_;
}

CommandWheel* CommandWheel::default_instance_ = NULL;

CommandWheel* CommandWheel::New() const {
  return new CommandWheel;
}

void CommandWheel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_speed;
        break;
      }
      
      // required double speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required double speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandWheel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required double speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandWheel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required double speed = 2;
    if (has_speed()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandWheel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandWheel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandWheel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandWheel::MergeFrom(const CommandWheel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandWheel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandWheel::CopyFrom(const CommandWheel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandWheel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CommandWheel::Swap(CommandWheel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandWheel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandWheel_descriptor_;
  metadata.reflection = CommandWheel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandKicker::kSpeedFieldNumber;
const int CommandKicker::kForcedFieldNumber;
#endif  // !_MSC_VER

CommandKicker::CommandKicker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandKicker::InitAsDefaultInstance() {
}

CommandKicker::CommandKicker(const CommandKicker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandKicker::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  forced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandKicker::~CommandKicker() {
  SharedDtor();
}

void CommandKicker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandKicker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandKicker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandKicker_descriptor_;
}

const CommandKicker& CommandKicker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5finternal_5fcommand_2eproto();  return *default_instance_;
}

CommandKicker* CommandKicker::default_instance_ = NULL;

CommandKicker* CommandKicker::New() const {
  return new CommandKicker;
}

void CommandKicker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    speed_ = 0;
    forced_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandKicker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double speed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_forced;
        break;
      }
      
      // optional bool forced = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_)));
          set_has_forced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandKicker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }
  
  // optional bool forced = 2 [default = false];
  if (has_forced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->forced(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandKicker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }
  
  // optional bool forced = 2 [default = false];
  if (has_forced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->forced(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandKicker::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double speed = 1;
    if (has_speed()) {
      total_size += 1 + 8;
    }
    
    // optional bool forced = 2 [default = false];
    if (has_forced()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandKicker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandKicker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandKicker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandKicker::MergeFrom(const CommandKicker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_forced()) {
      set_forced(from.forced());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandKicker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandKicker::CopyFrom(const CommandKicker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandKicker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CommandKicker::Swap(CommandKicker* other) {
  if (other != this) {
    std::swap(speed_, other->speed_);
    std::swap(forced_, other->forced_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandKicker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandKicker_descriptor_;
  metadata.reflection = CommandKicker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDribbler::kSpeedFieldNumber;
const int CommandDribbler::kForcedFieldNumber;
#endif  // !_MSC_VER

CommandDribbler::CommandDribbler()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDribbler::InitAsDefaultInstance() {
}

CommandDribbler::CommandDribbler(const CommandDribbler& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDribbler::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  forced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDribbler::~CommandDribbler() {
  SharedDtor();
}

void CommandDribbler::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandDribbler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDribbler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDribbler_descriptor_;
}

const CommandDribbler& CommandDribbler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5finternal_5fcommand_2eproto();  return *default_instance_;
}

CommandDribbler* CommandDribbler::default_instance_ = NULL;

CommandDribbler* CommandDribbler::New() const {
  return new CommandDribbler;
}

void CommandDribbler::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    speed_ = 0;
    forced_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDribbler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double speed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_forced;
        break;
      }
      
      // optional bool forced = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_)));
          set_has_forced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDribbler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }
  
  // optional bool forced = 2 [default = false];
  if (has_forced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->forced(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDribbler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }
  
  // optional bool forced = 2 [default = false];
  if (has_forced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->forced(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDribbler::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double speed = 1;
    if (has_speed()) {
      total_size += 1 + 8;
    }
    
    // optional bool forced = 2 [default = false];
    if (has_forced()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDribbler::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDribbler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDribbler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDribbler::MergeFrom(const CommandDribbler& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_forced()) {
      set_forced(from.forced());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDribbler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDribbler::CopyFrom(const CommandDribbler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDribbler::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CommandDribbler::Swap(CommandDribbler* other) {
  if (other != this) {
    std::swap(speed_, other->speed_);
    std::swap(forced_, other->forced_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDribbler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDribbler_descriptor_;
  metadata.reflection = CommandDribbler_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRobot::kIdFieldNumber;
const int CommandRobot::kWheelsFieldNumber;
const int CommandRobot::kKickerFieldNumber;
const int CommandRobot::kDribblerFieldNumber;
#endif  // !_MSC_VER

CommandRobot::CommandRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRobot::InitAsDefaultInstance() {
  kicker_ = const_cast< ::CommandKicker*>(&::CommandKicker::default_instance());
  dribbler_ = const_cast< ::CommandDribbler*>(&::CommandDribbler::default_instance());
}

CommandRobot::CommandRobot(const CommandRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRobot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  kicker_ = NULL;
  dribbler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRobot::~CommandRobot() {
  SharedDtor();
}

void CommandRobot::SharedDtor() {
  if (this != default_instance_) {
    delete kicker_;
    delete dribbler_;
  }
}

void CommandRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRobot_descriptor_;
}

const CommandRobot& CommandRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5finternal_5fcommand_2eproto();  return *default_instance_;
}

CommandRobot* CommandRobot::default_instance_ = NULL;

CommandRobot* CommandRobot::New() const {
  return new CommandRobot;
}

void CommandRobot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_kicker()) {
      if (kicker_ != NULL) kicker_->::CommandKicker::Clear();
    }
    if (has_dribbler()) {
      if (dribbler_ != NULL) dribbler_->::CommandDribbler::Clear();
    }
  }
  wheels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wheels;
        break;
      }
      
      // repeated .CommandWheel wheels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wheels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wheels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wheels;
        if (input->ExpectTag(26)) goto parse_kicker;
        break;
      }
      
      // optional .CommandKicker kicker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kicker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kicker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dribbler;
        break;
      }
      
      // optional .CommandDribbler dribbler = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dribbler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dribbler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .CommandWheel wheels = 2;
  for (int i = 0; i < this->wheels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wheels(i), output);
  }
  
  // optional .CommandKicker kicker = 3;
  if (has_kicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->kicker(), output);
  }
  
  // optional .CommandDribbler dribbler = 4;
  if (has_dribbler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dribbler(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .CommandWheel wheels = 2;
  for (int i = 0; i < this->wheels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wheels(i), target);
  }
  
  // optional .CommandKicker kicker = 3;
  if (has_kicker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->kicker(), target);
  }
  
  // optional .CommandDribbler dribbler = 4;
  if (has_dribbler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dribbler(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRobot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional .CommandKicker kicker = 3;
    if (has_kicker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kicker());
    }
    
    // optional .CommandDribbler dribbler = 4;
    if (has_dribbler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dribbler());
    }
    
  }
  // repeated .CommandWheel wheels = 2;
  total_size += 1 * this->wheels_size();
  for (int i = 0; i < this->wheels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wheels(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRobot::MergeFrom(const CommandRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  wheels_.MergeFrom(from.wheels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kicker()) {
      mutable_kicker()->::CommandKicker::MergeFrom(from.kicker());
    }
    if (from.has_dribbler()) {
      mutable_dribbler()->::CommandDribbler::MergeFrom(from.dribbler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRobot::CopyFrom(const CommandRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRobot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < wheels_size(); i++) {
    if (!this->wheels(i).IsInitialized()) return false;
  }
  if (has_kicker()) {
    if (!this->kicker().IsInitialized()) return false;
  }
  if (has_dribbler()) {
    if (!this->dribbler().IsInitialized()) return false;
  }
  return true;
}

void CommandRobot::Swap(CommandRobot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    wheels_.Swap(&other->wheels_);
    std::swap(kicker_, other->kicker_);
    std::swap(dribbler_, other->dribbler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRobot_descriptor_;
  metadata.reflection = CommandRobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToTransmission::kRobotsFieldNumber;
#endif  // !_MSC_VER

ToTransmission::ToTransmission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToTransmission::InitAsDefaultInstance() {
}

ToTransmission::ToTransmission(const ToTransmission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToTransmission::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToTransmission::~ToTransmission() {
  SharedDtor();
}

void ToTransmission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToTransmission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToTransmission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToTransmission_descriptor_;
}

const ToTransmission& ToTransmission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5finternal_5fcommand_2eproto();  return *default_instance_;
}

ToTransmission* ToTransmission::default_instance_ = NULL;

ToTransmission* ToTransmission::New() const {
  return new ToTransmission;
}

void ToTransmission::Clear() {
  robots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToTransmission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CommandRobot robots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_robots;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToTransmission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CommandRobot robots = 1;
  for (int i = 0; i < this->robots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robots(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToTransmission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CommandRobot robots = 1;
  for (int i = 0; i < this->robots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->robots(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToTransmission::ByteSize() const {
  int total_size = 0;
  
  // repeated .CommandRobot robots = 1;
  total_size += 1 * this->robots_size();
  for (int i = 0; i < this->robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToTransmission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToTransmission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToTransmission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToTransmission::MergeFrom(const ToTransmission& from) {
  GOOGLE_CHECK_NE(&from, this);
  robots_.MergeFrom(from.robots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToTransmission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToTransmission::CopyFrom(const ToTransmission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToTransmission::IsInitialized() const {
  
  for (int i = 0; i < robots_size(); i++) {
    if (!this->robots(i).IsInitialized()) return false;
  }
  return true;
}

void ToTransmission::Swap(ToTransmission* other) {
  if (other != this) {
    robots_.Swap(&other->robots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToTransmission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToTransmission_descriptor_;
  metadata.reflection = ToTransmission_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
